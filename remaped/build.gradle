import org.gradle.api.DefaultTask
import org.gradle.api.tasks.*
import org.objectweb.asm.*
import org.objectweb.asm.commons.*
import java.util.jar.*
import java.util.zip.*

buildscript {
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://repo.jenkins-ci.org/public/' }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
        mavenLocal()
    }
    dependencies {
        classpath "org.ow2.asm:asm:9.8"
        classpath "org.ow2.asm:asm-commons:9.8"
        classpath "org.ow2.asm:asm-tree:9.8"
        classpath "com.google.googlejavaformat:google-java-format:1.27.0"
    }
}

plugins {
    id 'java-library'
    id 'com.diffplug.spotless' version '7.0.3'
}

repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://repo.jenkins-ci.org/public/' }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
        mavenLocal()
}

spotless {
    java {
        target "**/*.java"		  
        googleJavaFormat()
    }
} 

apply plugin: RemapingPlugin

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.assemble.dependsOn tasks.remap
tasks.build.dependsOn tasks.remap

dependencies {
    compileOnly files('libs/remapped-java-compiler-24-29.jar')
    compileOnly files('libs/remapped-jdk-compiler-24-29.jar')
    compileOnly files('libs/remapped-jdk-internal-opt-24-29.jar')
    compileOnly files('libs/remapped-jdk-jdeps-24-29.jar')
    compileOnly files('libs/remapped-jrt-fs-24-29.jar')
}

class RemapingPlugin implements Plugin<Project> {
    void apply(Project target) {
        target.tasks.register("remap", RemapingTask) {
            dependsOn target.tasks.named("jar")
        }
    }
}

abstract class RemapingTask extends DefaultTask {

    @InputFile
    File getInputJar() {
        project.tasks.jar.archiveFile.get().asFile
    }

    @OutputFile
    File getOutputJar() {
        new File(project.buildDir, "libs/${project.name}.jar")
    }

    @TaskAction
    void remap() {
        File originalJar = getInputJar()
        File tempJar = new File(project.buildDir, "tmp/libs/${project.name}.jar")
        File outputJar = getOutputJar()

        tempJar.parentFile.mkdirs()
        outputJar.parentFile.mkdirs()

        project.copy {
            from originalJar
            into tempJar.parentFile           
        }
        
        Remapper remapper = new Remapper() {
            @Override
            String map(String name) {
                if (name.startsWith("jadx")) return name.replaceFirst("^jadx", "jdk")
                if (name.startsWith("openjdk") &&
                    !name.matches("openjdk/sun/tools/javac/resources/compiler(_[a-zA-Z_]+)?")) {
                    return name.replaceFirst("^openjdk", "com")
                }
                if (name.startsWith("jax")) return name.replaceFirst("^jax", "sun")
                if (name.startsWith("javx")) return name.replaceFirst("^javx", "javax")
                return name
            }
        }

        try (
            JarFile jar = new JarFile(tempJar)
            ZipOutputStream out = new ZipOutputStream(new FileOutputStream(outputJar))
        ) {
            Enumeration<JarEntry> entries = jar.entries()
            while (entries.hasMoreElements()) {
                JarEntry entry = entries.nextElement()
                InputStream entryStream = jar.getInputStream(entry)

                if (entry.getName().endsWith(".class")) {
                    ClassReader reader = new ClassReader(entryStream)
                    ClassWriter writer = new ClassWriter(ClassWriter.COMPUTE_FRAMES)
                    ClassRemapper remapperVisitor = new ClassRemapper(writer, remapper)
                    reader.accept(remapperVisitor, ClassReader.EXPAND_FRAMES)
                    byte[] remappedBytes = writer.toByteArray()
                    String newName = remapper.map(entry.getName())
                    out.putNextEntry(new ZipEntry(newName))
                    out.write(remappedBytes)
                    out.closeEntry()
                } else {
                    out.putNextEntry(new ZipEntry(entry.getName()))
                    out.write(entryStream.readAllBytes())
                    out.closeEntry()
                }

                entryStream.close()
            }
        }
    }
}
